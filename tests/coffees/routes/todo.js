// Generated by CoffeeScript 1.4.0
(function() {
  var MyTodo, child_process, fs, loadFile, loadTodos, path, writeFile,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  child_process = require('child_process');

  loadFile = function(todotxt) {
    var lines;
    return lines = (function() {
      var resp;
      resp = fs.readFileSync(todotxt, 'utf-8');
      return resp.split(/\r?\n/);
    })();
  };

  writeFile = function(filen, data) {
    fs.writeFileSync(filen, data.join("\n"), 'utf-8');
    return true;
  };

  loadTodos = function(todotxt) {
    var catchAndStrip, duedate, lines, lists, prio;
    lines = loadFile(todotxt);
    catchAndStrip = function(reg, txt) {
      var rr;
      rr = txt.match(reg);
      if (rr) {
        txt = txt.replace(reg, "");
        return [rr[1], txt];
      } else {
        return [null, txt];
      }
    };
    prio = /\(([a-z])\)/;
    duedate = /\^([a-zA-Z0-9-.,_]+)/;
    lists = lines.filter(function(l) {
      return !!l;
    }).map(function(l) {
      var due, pr, _ref, _ref1;
      _ref = catchAndStrip(prio, l), pr = _ref[0], l = _ref[1];
      _ref1 = catchAndStrip(duedate, l), due = _ref1[0], l = _ref1[1];
      return [l, pr, due];
    });
    return lists;
  };

  MyTodo = (function() {

    function MyTodo(todotxt, donetxt) {
      this.todotxt = todotxt;
      this.donetxt = donetxt;
      this.done = __bind(this.done, this);
      this.newtodo = __bind(this.newtodo, this);
      this.refresh = __bind(this.refresh, this);
      this.read = __bind(this.read, this);
      this.todolist = __bind(this.todolist, this);
    }

    MyTodo.prototype.todolist = function(req, res) {
      var lists;
      lists = loadTodos(this.todotxt);
      return res.render('todolist', {
        mlines: lists
      });
    };

    MyTodo.prototype.read = function(req, res) {
      var lists;
      lists = loadTodos(this.todotxt);
      return res.render('todo', {
        mlines: lists
      });
    };

    MyTodo.prototype.refresh = function(req, res) {
      var paths;
      paths = path.resolve(this.todotxt);
      paths = paths.substring(0, paths.lastIndexOf("/"));
      return child_process.exec("git pull lin master", {
        cmd: paths
      }, function(err, stdout, stderr) {
        if (err) {
          console.log("Error! " + err);
        } else {
          console.log("GIT: Updated! " + stdout);
        }
        return res.redirect('/todo');
      });
    };

    MyTodo.prototype.newtodo = function(req, res) {
      var descn, lines, newLine, prio;
      descn = req.query.desc;
      prio = req.query.prio;
      if (descn) {
        lines = loadFile(this.todotxt);
        newLine = (prio ? "(" + prio + ") " : "") + ("" + descn);
        lines.push(newLine);
        writeFile(this.todotxt, lines);
      }
      return res.redirect('/todo');
    };

    MyTodo.prototype.done = function(req, res) {
      var doneItem, donelines, lid, lines;
      lines = loadFile(this.todotxt);
      lid = req.query.id;
      doneItem = null;
      if (lines.length >= lid - 1) {
        doneItem = lines.splice(lid, 1);
      }
      writeFile(this.todotxt, lines);
      console.log("done: " + doneItem);
      if (doneItem.length === 1) {
        donelines = loadFile(this.donetxt);
        console.log("done: " + doneItem[0]);
        donelines.push(doneItem[0]);
        writeFile(this.donetxt, donelines);
      }
      return res.redirect('/todo/list');
    };

    return MyTodo;

  })();

  exports.r = function(todotxt, donetxt) {
    return {
      read: new MyTodo(todotxt, donetxt).read,
      done: new MyTodo(todotxt, donetxt).done,
      todolist: new MyTodo(todotxt, donetxt).todolist,
      newtodo: new MyTodo(todotxt, donetxt).newtodo,
      refresh: new MyTodo(todotxt, donetxt).refresh
    };
  };

}).call(this);
